ÇOK BOYUTLU DİZİLER

- Bugüne kadar tek boyutlu diziler kullandık.
- Çok boyutlu diziler oyun programlamada yahut yüksek istatiksel çalışmalarda kullanılan bir yapıdır.

Çok Boyutlu Dizi Tanımlama

type[] -> tek boyutlu diziler

type[,] -> iki boyutlu bir dizi(çift)

type[,,,] -> dört boyutlu dizi 

- Çok boyutlu dizilerde indexer içerisinde virgül , ile tanımlama yapılmaktadır.
- Virgül sayısı + 1 değeri dizinin derecesini vermektedir.

int[] sayilar = new int[3];

int [,] sayilar = new int[3,5]; //2 boyutlu diziler x ve y koordinatları ile tahayyül edebileceğimiz dizilerdir.

int[,,,] = new int [3, 4, 5, 6]; //2 dereceliden fazla olan dizileri günlük hayatta tahayyül edebilmek pek mümkün değil
//Fakat programatik olarak inşa edebilmekteyiz.

Tanımlanmış Çok Boyutlu Diziye Değer Atama

int[,] sayilar = new int [3,4]; //x'te 0,1,2 ve y'de 0,1,2,3 olmak üzere index'leneceklerdir.
  
	0		1		2
0   			  (2,0)
1 (0,1)
2		  (1,2)
3

sayilar [1,2] = 5; //x'i 1, y'si 2 olan alana 5 değerini yaz.
sayilar [2,0] = 15;

Çok dereceli dizileri örneklendirelim:

int [,,,] sayilar = new int [2,3,4,5];

sayilar[0,0,0,1] = 15;
sayilar[0,0,0,2] = 16;
sayilar[0,0,0,3] = 17;
sayilar[0,0,0,4] = 18;
sayilar[0,0,0,5] = 19; //dördüncü derecenin tüm değerleri atandı.
sayilar[1,0,0,0] = 115; //birincinin en sonuna ata.

Örnek:

int[,,] sayilar = new int [2,3,4];

sayilar [0,0,1] = 15; //görsel olarak hayal etmek zordur.

Çok Boyutlu Dizilerde Değer Atama - Farklı Varyasyonlar

Örnek:

int sayilar[,] sayilar = {
						 { 3,5,7 }, //birinci derecenin kolonlarını belirledik.
						 { 5,6,7 }
						 { 15, 36, 57 },
						 { 25, 46, 67 }, //y derecesi 4 satır oldu toplamda. 3'e 4'lük bir dizi oluştu.
						 }; 
		
	0		1		2		
0	3		5		7	
1	5		6		7
2	15		36		57
3	25		46		67

---------------------

Çok Boyutlu Dizilerden Değer Okuma

int [,] sayilar = new int [4,3];
sayilar [0,0] = 3;
sayilar [0,1] = 5;
sayilar [0,2] = 7;
sayilar [1,0] = 5;
sayilar [1,1] = 6;
sayilar [1,2] = 7;
sayilar [3,2] = 67;

Console.WriteLine(sayilar[3,2]);
Console.WriteLine(sayilar[0,0]);

Çıktı:
67
3

---------------------

Dizinin Derecesini Öğrenme(Rank Özelliği)

Console.WriteLine(sayilar.Rank); //ilgili dizinin Rank değerini bize getirecektir. Yukarıdaki dizinin Rank değeri 2'dir.

--------------------

Çok Boyutlu Dizilerin Eleman Sayısını Hesaplama

int[,,] sayilar = new int[2,2,4]; // toplam eleman sayısını bulmak için tüm boyutların eleman sayılarını çarpmak yeterlidir. 2*2*4 = 16'dır. Dizinin Length'i 16'dır.
//bu dizi Rank'i 3 olan 16 elemanlı bir dizidir.

Console.WriteLine(sayilar.Length); //16

Sadece bir boyutun Length'ini öğrenmek için ise;

Console.WriteLine(sayilar.GetLength(0));
Console.WriteLine(sayilar.GetLength(1));
Console.WriteLine(sayilar.GetLength(2));

Çıktı:
2
2
4

-------------------------

Çok Boyutlu Dizilerdeki Verileri İç İçe Döngülerle Ekrana Yazdırma

Örnek:	for (int i = 0; i < sayilar.GetLength(0); i++)
        {
			for (int j = 0; j < sayilar.GetLength(1); j++)
            {
                for (int h = 0; h < sayilar.GetLength(2); h++)
                {
                    Console.Write(sayilar[i,j,h] + "       ");
                }
                    Console.WriteLine("");
            }
        }

Çıktı:

0       0       0       0       
0       0       0       0
0       0       0       0
0       0       0       0

- Çıktıya çok takılmadan her bir boyuta nasıl GetLength ile girilip, en içteki loop'ta e sonuncu boyutta tam tur attığımızı görmek lazım.

-----------------------------

Düzensiz Diziler Nedir?

- Düzensiz diziler her bir elemanı kendi içerisinde farklı bir dizi barındıran dizilerdir.
- Çok boyutlu dizilerden tek farkı, çok boyutlu dizilerin sütun sayılarının sabit, düzensiz dizilerin ise sütun sayılarının değişken olmasıdır.

type[]; //type türünde bir dizi tanımladık.

type[][] //type dizisi türünde değerler tutacak bir dizi tanımladık. 

int[][] sayilar = new int[3][]; //dizi içerisinde integer türünden diziler barındıran bir dizi tanımladık.

Değer Atama:

sayilar[0] = new int[3] {3,5,7};
sayilar[1] = new int[5] {3,5,7, 523, 01};
sayilar[2] = new int[10] {3,5,7,234,23,4,234,234,123};

Değer Okuma:

Console.WriteLine(sayilar[0][0]);
sayilar[0][0] = 13;
Console.WriteLine(sayilar[0][0]);

Çıktı: 
3
13

Eleman Sayısı Öğrenme:

Console.WriteLine(sayilar.Length); //düzensiz dizinin eleman sayısını getirir. Bu bize total eleman sayısını vermez. Çok boyutlu dizilerde olduğu gibi düzensiz diziler
//başlı başına bir dizi yapısı değildir. Normal dizi yapılanmasıdır. Lakin içerisinde dizi barındıran bir dizidir. Haliyle eleman sayısını döndürür.

Ekrana 3 yazdırır. Ana dizinin eleman sayısıdır.

//İçteki dizilerin eleman sayılarını totalde elde edebilmek için her birini toplamamız gerekir.

sayilar[0] = new int[3] {3,5,7};
sayilar[1] = new int[5] {3,5,7, 523, 01};
sayilar[2] = new int[10] {3,5,7,234,23,4,234,234,123};

3+5+10 = 18 tane elamanı vardır.

Console.WriteLine(sayilar[0].Length + sayilar[1].Length + sayilar[2].Length);

Ekrana 18 yazdırır. Toplam eleman sayısıdır.

-------------------

Düzensiz Dizilerde İç İçe Döngülerle Çalışma

		static void Main(string[] args)
        {
            int[][] sayilar = new int[3][];

            sayilar[0] = new int[3] {3,5,7};
            sayilar[1] = new int[5] {3,5,7, 523, 01};
            sayilar[2] = new int[10] {3,5,7,234,23,4,234,234,123,212};

            for (int i = 0; i < sayilar.Length; i++)
            {
                for (int j = 0; j < sayilar[i].Length; j++)
                {
                    Console.Write(sayilar[i][j] + "   -   ");
                }
                 Console.WriteLine("");
            }
        }
		
Çıktı:

3   -   5   -   7   -   
3   -   5   -   7   -   523   -   1   -
3   -   5   -   7   -   234   -   23   -   4   -   234   -   234   -   123   -   212   -

Örnek:

Matrislerde Toplam

namespace OrnekProje
{
    class Program
    {
        static void Main(string[] args)
        {
            
            System.Console.WriteLine("Matrislerde Toplama");
            int[,] matris1 = {{10,12,14,18},{20,14,16,13},{25,14,41,21},{32,36,41,57}};
            int[,] matris2 = {{40,30,20,10},{7,9,8,6},{21,22,23,24},{34,35,36,37}};

            int[,] toplam = new int[4,4];

            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    toplam[i,j] = matris1[i,j] + matris2[i,j];
                }
            }

            for (int k = 0; k < 4; k++)
            {
                System.Console.WriteLine();
                
                for (int m = 0; m < 4; m++)
                {
                    Console.Write(toplam[k,m] + " ");
                }
            }
        }
    }
}

Çıktı:

Matrislerde Toplama

50 42 34 28
27 23 24 19
46 36 64 45
66 71 77 94

Örnek:

Kullanıcı tarafından satır ve sütun sayıları girilen Matris'in Transpoz'u ve matrisin bir tam sayı ile çarpımı.

Transpor = satırlar sütun olacak.

using System;

namespace OrnekProje
{
    class Program
    {
        static void Main(string[] args)
        {
            
            int satir, sutun;
            Console.Write("Satır sayısını girin: ");
            satir = Convert.ToUInt16(Console.ReadLine());
            Console.Write("Sütun sayısını girin: ");
            sutun = Convert.ToUInt16(Console.ReadLine());

            int[,] matris = new int[satir,sutun];

            System.Console.WriteLine("\nOrjinal Matris: ");

            for (int i = 0; i < satir; i++)
            {
                for (int j = 0; j < sutun; j++)
                {
                    Console.Write("Matrisin {0} x {1} Değeri: ", i+1, j+1);
                    matris[i,j] = Convert.ToUInt16(Console.ReadLine());
                }
            }
            System.Console.WriteLine();

            for (int k = 0; k < satir; k++)
            {
                for (int n = 0; n < sutun; n++)
                {
                    Console.Write(matris[k,n] + " ");
                }
                System.Console.WriteLine();
            }
            //transpoz
            System.Console.WriteLine("\nTranspoz: ");
            for (int x = 0; x < sutun; x++)
            {
                Console.WriteLine();
                for (int y = 0; y < satir; y++)
                {
                    Console.Write(matris[y, x] + " ");
                }
            }

            //kat sayı çarpımı
            Console.Write("\nKat sayıyı girin: ");
            int sayi = Convert.ToUInt16(Console.ReadLine());

            if(sayi != 0)
            {
            Console.Write("Kat sayı çarpımı: \n");

            for (int s = 0; s < satir; s++)
            {
                for (int p = 0; p < sutun; p++)
                {
                    Console.Write(matris[s,p] * sayi + " ");
                }
                System.Console.WriteLine();
            }
            }
        }
    }
}

Çıktı:

Satir sayisini girin: 2
Sütun sayisini girin: 3

Orjinal Matris:
Matrisin 1 x 1 Degeri: 1
Matrisin 1 x 2 Degeri: 2
Matrisin 1 x 3 Degeri: 3
Matrisin 2 x 1 Degeri: 4
Matrisin 2 x 2 Degeri: 5
Matrisin 2 x 3 Degeri: 6

1 2 3
4 5 6

Transpoz:

1 4
2 5
3 6
Kat sayiyi girin: 5


Kat sayi çarpimi:
5 10 15
20 25 30
PS C:\Users\acdem\Desktop\C#VSCode\OrnekProje> dotnet run
Satir sayisini girin: 2
Sütun sayisini girin: 3

Orjinal Matris:
Matrisin 1 x 1 Degeri: 1
Matrisin 1 x 2 Degeri: 2
Matrisin 1 x 3 Degeri: 3
Matrisin 2 x 1 Degeri: 4
Matrisin 2 x 2 Degeri: 5
Matrisin 2 x 3 Degeri: 6

1 2 3
4 5 6

Transpoz:

1 4
2 5
3 6
Kat sayiyi girin: 5
Kat sayi çarpimi:
5 10 15
20 25 30

